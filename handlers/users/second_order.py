import asyncio
import logging

import aiogram.utils.markdown as fmt
import emoji
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import ReplyKeyboardRemove

from data import config
from filters import IsPrivate, InMorningTimeList
from keyboards.default import select_second_time, confim_second_kb, select_city
from keyboards.default.confim_second_order import confim_second_address_kb, confim_second_address_confim_kb
from loader import dp, bot
from states import SecondOrder
from utils.db_api import quick_commands
from utils.misc.check_time import second_check_time
from utils.misc.check_time_second import check_time_second

from utils.notify_admins import send_notify_admins, second_send_notify_admins
from utils.send_media import beats_latecomers

@dp.message_handler(IsPrivate(), text="–£—Ç—Ä–µ–Ω–Ω—è—è –¥–æ—Å—Ç–∞–≤–∫–∞")
async def select_time_morning_order(message: types.Message):
    user = await quick_commands.select_user(message.from_user.id)
    if user.name == None or user.address == None or user.number == None or user.city == None:
        await message.answer(f'–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è –º—ã –Ω–µ–∑–Ω–∞–∫–æ–º—ã. –°–∫–æ—Ä–µ–µ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /register\n'
                             f'–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –¥–æ—Å—Ç–∞–≤–∫—É –≤–Ω–æ–≤—å ')
        logging.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª /order, –Ω–æ –Ω–µ –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    else:
        await message.answer(
            f"{fmt.hbold('–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ!')}\n"
            f"{fmt.hbold('–ó–∞–ø–∏—Å—å –≤ —É—Ç—Ä–µ–Ω–Ω—é—é –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º, —á—å–∏ —Å–º–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 06:30.')} \n\n")
        await message.answer(
            f'–ü–æ–¥—Å–∫–∞–∂–∏, –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞? {emoji.emojize(":slightly_smiling_face:")}',
            reply_markup=select_second_time)
        logging.warning(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} @{message.from_user.username} –≤—ã–±—Ä–∞–ª /morning_order | –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏')
        await SecondOrder.Time.set()


@dp.message_handler(InMorningTimeList(), state=SecondOrder.Time)
async def set_second_time(message: types.Message, state: FSMContext):
    user = await quick_commands.select_user(message.from_user.id)
    await user.update(second_time=message.text).apply()
    logging.warning(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} @{message.from_user.username} —É–∫–∞–∑–∞–ª –≤—Ä–µ–º—è | –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ | {message.text}')
    await message.answer("–î–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É!")
    if user.second_address == None or user.second_city == None:
        await message.answer(f"–í–∏–∂—É, —á—Ç–æ —É —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å —É—Ç—Ä–µ–Ω–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
                             f"–Ø –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å: {user.city}, {user.address}?",
                             reply_markup=confim_second_address_kb)
    else:
        await message.answer(f"–¢–µ–±—è –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É: {user.second_city}, {user.second_address}?",
                             reply_markup=confim_second_address_confim_kb)


@dp.message_handler(IsPrivate(), text="–ù–µ—Ç, —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å", state=SecondOrder.Time)
async def change_second_address(message: types.Message, state: FSMContext):
    await message.answer(f'–û—Å—Ç–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ {emoji.emojize(":taxi:")}\n')
    await message.answer(
        f'–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ä–∞–∑–≤–æ–∑ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –≤ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ 25 –∫–º –æ—Ç –ò—Ä–∫—É—Ç—Å–∫–∞.')
    await message.answer(
        f'{emoji.emojize(":backhand_index_pointing_down:")} –í—ã–±–µ—Ä–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã! {emoji.emojize(":backhand_index_pointing_down:")} \n',
        reply_markup=select_city)
    await SecondOrder.City.set()


@dp.message_handler(IsPrivate(), state=SecondOrder.City)
async def change_second_address_confim(message: types.Message, state: FSMContext):
    user = await quick_commands.select_user(message.from_user.id)
    await user.update(second_city=message.text).apply()
    logging.warning(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} @{message.from_user.username} –≤–≤–µ–ª –≥–æ—Ä–æ–¥ –Ω–∞ —É—Ç—Ä–æ| –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ | {message.text}')
    await state.update_data(City_User=message.text)
    await message.answer(f'–û—Å—Ç–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å: —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞. {emoji.emojize(":taxi:")}\n',
                         reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(1)
    await message.answer(f'–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ª–µ–≥–∫–æ—á–µ—Ç–∞–µ–º –¥–ª—è –Ω–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:\n '
                         f'—É–ª. [–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã], [‚Ññ –¥–æ–º–∞] \n\n'
                         f'–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:\n'
                         f'–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ë–µ—Ä–µ–∑–æ–≤—ã–π, 44\n'
                         f'–ø—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞, 6\n'
                         f'—É–ª. –ï—Ä—ë–º–µ–Ω–∫–æ, 59/3\n')
    await SecondOrder.Address.set()


@dp.message_handler(IsPrivate(), state=SecondOrder.Address)
async def change_second_address_confim(message: types.Message, state: FSMContext):
    logging.warning(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} @{message.from_user.username} –≤–≤–µ–ª –∞–¥—Ä–µ—Å –Ω–∞ —É—Ç—Ä–æ| –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ | {message.text}')
    user = await quick_commands.select_user(message.from_user.id)
    await user.update(second_address=message.text).apply()
    await confim_second_order(message, user)


@dp.message_handler(IsPrivate(), text="–î–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π!", state=SecondOrder.Time)
async def confim_second_equial_first(message: types.Message, state: FSMContext):
    user = await quick_commands.select_user(message.from_user.id)
    await user.update(second_address=user.address).apply()
    await user.update(second_city=user.city).apply()
    await message.answer("–ì–æ—Ç–æ–≤–æ! –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å —Ç–µ–ø–µ—Ä—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–¥—Ä–µ—Å–æ–º —É—Ç—Ä–µ–Ω–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏",
                         reply_markup=ReplyKeyboardRemove())
    await confim_second_order(message, user)
    logging.warning(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} @{message.from_user.username} —É–∫–∞–∑–∞–ª, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å| –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ | {message.text}')


@dp.message_handler(IsPrivate(), text="–î–∞, –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ!", state=SecondOrder.Time)
async def second_address_confim(message: types.Message, state: FSMContext):
    user = await quick_commands.select_user(message.from_user.id)
    await confim_second_order(message, user)
    logging.warning(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} @{message.from_user.username} –∞–¥—Ä–µ—Å –±—ã–ª —É–∫–∞–∑–∞–Ω —Ä–∞–Ω–µ–µ | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ | {message.text}')


@dp.message_handler(IsPrivate(), text="–ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ç—Ä–æ", state="*")
async def change_info_message(message: types.Message, state: FSMContext):
    await message.answer("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /morning_order",
                         reply_markup=ReplyKeyboardRemove())
    await state.finish()
    logging.warning(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} @{message.from_user.username} –ø–æ–ª—É—á–∏–ª –æ—Ç–±–æ–π–Ω–∏–∫ /morning_order| –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ | {message.text}')


#
#
async def confim_second_order(message, user):
    await message.answer(
        f"{emoji.emojize('üåù')} {fmt.hbold('–î–∞–≤–∞–π –≤—Å–µ —Å–≤–µ—Ä–∏–º!')} {emoji.emojize('üåù')} \n\n"
        f"{fmt.hbold('–§–ò–û:')} {user.name}\n"
        f"{fmt.hbold('–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: ')} {user.second_city}\n"
        f"{fmt.hbold('–ê–¥—Ä–µ—Å: ')} {user.second_address}\n"
        f"{fmt.hbold('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')} {user.number}\n"
        f"{fmt.hbold('–í—Ä–µ–º—è: ')} {user.second_time}\n", reply_markup=confim_second_kb)
    logging.warning(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑ | {user.name}, {user.second_city} {user.second_address}, {user.number}, {user.second_time} | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞')
    await SecondOrder.Confim.set()


@dp.message_handler(IsPrivate(), text="–í—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!", state=SecondOrder.Confim)
async def change_info(message: types.Message, state: FSMContext):
    user = await quick_commands.select_user(message.from_user.id)
    await state.finish()
    if user.second_time is None:
        await message.answer("–£–ø—Å! –£ —Ç–µ–±—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=ReplyKeyboardRemove())
    else:
        if second_check_time() is False and user.second_ordered != 1:
            await message.answer(
                f'–£–≤—ã, –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —É—Ç—Ä–µ–Ω–Ω—é—é –¥–æ—Å—Ç–∞–≤–∫—É –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ 18:00 {emoji.emojize(":expressionless_face:")}\n\n',
                reply_markup=ReplyKeyboardRemove())
            logging.warning(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–∑–¥–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è –≤ —É—Ç—Ä–µ–Ω–Ω—é—é –¥–æ—Å—Ç–∞–≤–∫—É | {user.name}, {user.second_city} {user.second_address}, {user.number}, {user.time} | –û—Ç–∫–∞–∑ –≤ –∑–∞–ø–∏—Å–∏')
            await second_send_notify_admins(dp, message, user, "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —É—Ç—Ä–µ–Ω–Ω—é—é –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ 18:00")
            await beats_latecomers(message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–µ—Ö—É —Å –º–æ–ª–æ—Ç–∫–æ–º
        elif user.second_ordered == 1:
            await message.answer(
                f'–¢—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É! –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á—Ç–µ–Ω—ã {emoji.emojize(":expressionless_face:")}\n\n',
                reply_markup=ReplyKeyboardRemove())
            await second_send_notify_admins(dp, message, user, "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ—Å—Ç–∞–≤–∫–µ –Ω–∞ —É—Ç—Ä–æ")
            logging.warning(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ç—Ä–æ | {user.name}, {user.second_city} {user.second_address}, {user.number}, {user.time} | –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ—Å—Ç–∞–≤–∫–µ –Ω–∞ —É—Ç—Ä–æ')
        else:
            await message.answer(f'–ì–æ—Ç–æ–≤–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è {emoji.emojize(":check_mark:")}',
                                 reply_markup=ReplyKeyboardRemove())
            await message.answer(
                f"–ú–∞—à–∏–Ω—ã –±—É–¥—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∫ 22:00. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç–µ.\n")
            await user.update(second_ordered=1).apply()
            await second_send_notify_admins(dp, message, user, "–ó–∞–ø–∏—Å—å –≤ —É—Ç—Ä–µ–Ω–Ω—é—é –¥–æ—Å—Ç–∞–≤–∫—É")
            logging.warning(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–∑–¥–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è –≤ —É—Ç—Ä–µ–Ω–Ω—é—é –¥–æ—Å—Ç–∞–≤–∫—É | {user.name}, {user.second_city} {user.second_address}, {user.number}, {user.time} | –û—Ç–∫–∞–∑ –≤ –∑–∞–ø–∏—Å–∏')
